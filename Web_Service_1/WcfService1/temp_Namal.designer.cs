#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfService1
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="NamalS_DB")]
	public partial class temp_NamalDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertItem_tbl(Item_tbl instance);
    partial void UpdateItem_tbl(Item_tbl instance);
    partial void DeleteItem_tbl(Item_tbl instance);
    partial void InsertLogin_Detail(Login_Detail instance);
    partial void UpdateLogin_Detail(Login_Detail instance);
    partial void DeleteLogin_Detail(Login_Detail instance);
    partial void InsertPayment_tbl(Payment_tbl instance);
    partial void UpdatePayment_tbl(Payment_tbl instance);
    partial void DeletePayment_tbl(Payment_tbl instance);
    partial void InsertStock_tbl(Stock_tbl instance);
    partial void UpdateStock_tbl(Stock_tbl instance);
    partial void DeleteStock_tbl(Stock_tbl instance);
    partial void InsertSupplier_Bill_tbl(Supplier_Bill_tbl instance);
    partial void UpdateSupplier_Bill_tbl(Supplier_Bill_tbl instance);
    partial void DeleteSupplier_Bill_tbl(Supplier_Bill_tbl instance);
    partial void InsertSuppliers_tbl(Suppliers_tbl instance);
    partial void UpdateSuppliers_tbl(Suppliers_tbl instance);
    partial void DeleteSuppliers_tbl(Suppliers_tbl instance);
    partial void InsertPayment_Report(Payment_Report instance);
    partial void UpdatePayment_Report(Payment_Report instance);
    partial void DeletePayment_Report(Payment_Report instance);
    #endregion
		
		public temp_NamalDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["NamalS_DBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public temp_NamalDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public temp_NamalDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public temp_NamalDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public temp_NamalDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Item_tbl> Item_tbls
		{
			get
			{
				return this.GetTable<Item_tbl>();
			}
		}
		
		public System.Data.Linq.Table<Login_Detail> Login_Details
		{
			get
			{
				return this.GetTable<Login_Detail>();
			}
		}
		
		public System.Data.Linq.Table<Payment_tbl> Payment_tbls
		{
			get
			{
				return this.GetTable<Payment_tbl>();
			}
		}
		
		public System.Data.Linq.Table<Stock_tbl> Stock_tbls
		{
			get
			{
				return this.GetTable<Stock_tbl>();
			}
		}
		
		public System.Data.Linq.Table<Supplier_Bill_tbl> Supplier_Bill_tbls
		{
			get
			{
				return this.GetTable<Supplier_Bill_tbl>();
			}
		}
		
		public System.Data.Linq.Table<Suppliers_tbl> Suppliers_tbls
		{
			get
			{
				return this.GetTable<Suppliers_tbl>();
			}
		}
		
		public System.Data.Linq.Table<Payment_Report> Payment_Reports
		{
			get
			{
				return this.GetTable<Payment_Report>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Item_tbl")]
	public partial class Item_tbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Item_Id;
		
		private string _Item_Name;
		
		private string _Item_Description;
		
		private System.Nullable<int> _Supplier_Id;
		
		private System.Nullable<double> _Price;
		
		private EntitySet<Stock_tbl> _Stock_tbls;
		
		private EntitySet<Supplier_Bill_tbl> _Supplier_Bill_tbls;
		
		private EntityRef<Suppliers_tbl> _Suppliers_tbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItem_IdChanging(int value);
    partial void OnItem_IdChanged();
    partial void OnItem_NameChanging(string value);
    partial void OnItem_NameChanged();
    partial void OnItem_DescriptionChanging(string value);
    partial void OnItem_DescriptionChanged();
    partial void OnSupplier_IdChanging(System.Nullable<int> value);
    partial void OnSupplier_IdChanged();
    partial void OnPriceChanging(System.Nullable<double> value);
    partial void OnPriceChanged();
    #endregion
		
		public Item_tbl()
		{
			this._Stock_tbls = new EntitySet<Stock_tbl>(new Action<Stock_tbl>(this.attach_Stock_tbls), new Action<Stock_tbl>(this.detach_Stock_tbls));
			this._Supplier_Bill_tbls = new EntitySet<Supplier_Bill_tbl>(new Action<Supplier_Bill_tbl>(this.attach_Supplier_Bill_tbls), new Action<Supplier_Bill_tbl>(this.detach_Supplier_Bill_tbls));
			this._Suppliers_tbl = default(EntityRef<Suppliers_tbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Item_Id
		{
			get
			{
				return this._Item_Id;
			}
			set
			{
				if ((this._Item_Id != value))
				{
					this.OnItem_IdChanging(value);
					this.SendPropertyChanging();
					this._Item_Id = value;
					this.SendPropertyChanged("Item_Id");
					this.OnItem_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Item_Name
		{
			get
			{
				return this._Item_Name;
			}
			set
			{
				if ((this._Item_Name != value))
				{
					this.OnItem_NameChanging(value);
					this.SendPropertyChanging();
					this._Item_Name = value;
					this.SendPropertyChanged("Item_Name");
					this.OnItem_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item_Description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Item_Description
		{
			get
			{
				return this._Item_Description;
			}
			set
			{
				if ((this._Item_Description != value))
				{
					this.OnItem_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._Item_Description = value;
					this.SendPropertyChanged("Item_Description");
					this.OnItem_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Supplier_Id", DbType="Int")]
		public System.Nullable<int> Supplier_Id
		{
			get
			{
				return this._Supplier_Id;
			}
			set
			{
				if ((this._Supplier_Id != value))
				{
					if (this._Suppliers_tbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplier_IdChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Id = value;
					this.SendPropertyChanged("Supplier_Id");
					this.OnSupplier_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float")]
		public System.Nullable<double> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_tbl_Stock_tbl", Storage="_Stock_tbls", ThisKey="Item_Id", OtherKey="Item_Id")]
		public EntitySet<Stock_tbl> Stock_tbls
		{
			get
			{
				return this._Stock_tbls;
			}
			set
			{
				this._Stock_tbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_tbl_Supplier_Bill_tbl", Storage="_Supplier_Bill_tbls", ThisKey="Item_Id", OtherKey="Item_Id")]
		public EntitySet<Supplier_Bill_tbl> Supplier_Bill_tbls
		{
			get
			{
				return this._Supplier_Bill_tbls;
			}
			set
			{
				this._Supplier_Bill_tbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Suppliers_tbl_Item_tbl", Storage="_Suppliers_tbl", ThisKey="Supplier_Id", OtherKey="Supplier_Id", IsForeignKey=true)]
		public Suppliers_tbl Suppliers_tbl
		{
			get
			{
				return this._Suppliers_tbl.Entity;
			}
			set
			{
				Suppliers_tbl previousValue = this._Suppliers_tbl.Entity;
				if (((previousValue != value) 
							|| (this._Suppliers_tbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Suppliers_tbl.Entity = null;
						previousValue.Item_tbls.Remove(this);
					}
					this._Suppliers_tbl.Entity = value;
					if ((value != null))
					{
						value.Item_tbls.Add(this);
						this._Supplier_Id = value.Supplier_Id;
					}
					else
					{
						this._Supplier_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Suppliers_tbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Stock_tbls(Stock_tbl entity)
		{
			this.SendPropertyChanging();
			entity.Item_tbl = this;
		}
		
		private void detach_Stock_tbls(Stock_tbl entity)
		{
			this.SendPropertyChanging();
			entity.Item_tbl = null;
		}
		
		private void attach_Supplier_Bill_tbls(Supplier_Bill_tbl entity)
		{
			this.SendPropertyChanging();
			entity.Item_tbl = this;
		}
		
		private void detach_Supplier_Bill_tbls(Supplier_Bill_tbl entity)
		{
			this.SendPropertyChanging();
			entity.Item_tbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Login_Details")]
	public partial class Login_Detail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Username;
		
		private string _Password;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Login_Detail()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Payment_tbl")]
	public partial class Payment_tbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Payment_Invoice_Id;
		
		private double _Amount;
		
		private System.DateTime _Payment_Date;
		
		private System.Nullable<int> _Supplier_Id;
		
		private EntityRef<Payment_Report> _Payment_Report;
		
		private EntityRef<Suppliers_tbl> _Suppliers_tbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPayment_Invoice_IdChanging(int value);
    partial void OnPayment_Invoice_IdChanged();
    partial void OnAmountChanging(double value);
    partial void OnAmountChanged();
    partial void OnPayment_DateChanging(System.DateTime value);
    partial void OnPayment_DateChanged();
    partial void OnSupplier_IdChanging(System.Nullable<int> value);
    partial void OnSupplier_IdChanged();
    #endregion
		
		public Payment_tbl()
		{
			this._Payment_Report = default(EntityRef<Payment_Report>);
			this._Suppliers_tbl = default(EntityRef<Suppliers_tbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payment_Invoice_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Payment_Invoice_Id
		{
			get
			{
				return this._Payment_Invoice_Id;
			}
			set
			{
				if ((this._Payment_Invoice_Id != value))
				{
					this.OnPayment_Invoice_IdChanging(value);
					this.SendPropertyChanging();
					this._Payment_Invoice_Id = value;
					this.SendPropertyChanged("Payment_Invoice_Id");
					this.OnPayment_Invoice_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float NOT NULL")]
		public double Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payment_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Payment_Date
		{
			get
			{
				return this._Payment_Date;
			}
			set
			{
				if ((this._Payment_Date != value))
				{
					this.OnPayment_DateChanging(value);
					this.SendPropertyChanging();
					this._Payment_Date = value;
					this.SendPropertyChanged("Payment_Date");
					this.OnPayment_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Supplier_Id", DbType="Int")]
		public System.Nullable<int> Supplier_Id
		{
			get
			{
				return this._Supplier_Id;
			}
			set
			{
				if ((this._Supplier_Id != value))
				{
					if (this._Suppliers_tbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplier_IdChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Id = value;
					this.SendPropertyChanged("Supplier_Id");
					this.OnSupplier_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Payment_tbl_Payment_Report", Storage="_Payment_Report", ThisKey="Payment_Invoice_Id", OtherKey="Report_No", IsUnique=true, IsForeignKey=false)]
		public Payment_Report Payment_Report
		{
			get
			{
				return this._Payment_Report.Entity;
			}
			set
			{
				Payment_Report previousValue = this._Payment_Report.Entity;
				if (((previousValue != value) 
							|| (this._Payment_Report.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Payment_Report.Entity = null;
						previousValue.Payment_tbl = null;
					}
					this._Payment_Report.Entity = value;
					if ((value != null))
					{
						value.Payment_tbl = this;
					}
					this.SendPropertyChanged("Payment_Report");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Suppliers_tbl_Payment_tbl", Storage="_Suppliers_tbl", ThisKey="Supplier_Id", OtherKey="Supplier_Id", IsForeignKey=true)]
		public Suppliers_tbl Suppliers_tbl
		{
			get
			{
				return this._Suppliers_tbl.Entity;
			}
			set
			{
				Suppliers_tbl previousValue = this._Suppliers_tbl.Entity;
				if (((previousValue != value) 
							|| (this._Suppliers_tbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Suppliers_tbl.Entity = null;
						previousValue.Payment_tbls.Remove(this);
					}
					this._Suppliers_tbl.Entity = value;
					if ((value != null))
					{
						value.Payment_tbls.Add(this);
						this._Supplier_Id = value.Supplier_Id;
					}
					else
					{
						this._Supplier_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Suppliers_tbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stock_tbl")]
	public partial class Stock_tbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Stock_Id;
		
		private int _Item_Id;
		
		private int _Current_Stock_Level;
		
		private System.Nullable<int> _Reorder_Limit;
		
		private EntityRef<Item_tbl> _Item_tbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStock_IdChanging(int value);
    partial void OnStock_IdChanged();
    partial void OnItem_IdChanging(int value);
    partial void OnItem_IdChanged();
    partial void OnCurrent_Stock_LevelChanging(int value);
    partial void OnCurrent_Stock_LevelChanged();
    partial void OnReorder_LimitChanging(System.Nullable<int> value);
    partial void OnReorder_LimitChanged();
    #endregion
		
		public Stock_tbl()
		{
			this._Item_tbl = default(EntityRef<Item_tbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stock_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Stock_Id
		{
			get
			{
				return this._Stock_Id;
			}
			set
			{
				if ((this._Stock_Id != value))
				{
					this.OnStock_IdChanging(value);
					this.SendPropertyChanging();
					this._Stock_Id = value;
					this.SendPropertyChanged("Stock_Id");
					this.OnStock_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item_Id", DbType="Int NOT NULL")]
		public int Item_Id
		{
			get
			{
				return this._Item_Id;
			}
			set
			{
				if ((this._Item_Id != value))
				{
					if (this._Item_tbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItem_IdChanging(value);
					this.SendPropertyChanging();
					this._Item_Id = value;
					this.SendPropertyChanged("Item_Id");
					this.OnItem_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Current_Stock_Level", DbType="Int NOT NULL")]
		public int Current_Stock_Level
		{
			get
			{
				return this._Current_Stock_Level;
			}
			set
			{
				if ((this._Current_Stock_Level != value))
				{
					this.OnCurrent_Stock_LevelChanging(value);
					this.SendPropertyChanging();
					this._Current_Stock_Level = value;
					this.SendPropertyChanged("Current_Stock_Level");
					this.OnCurrent_Stock_LevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reorder_Limit", DbType="Int")]
		public System.Nullable<int> Reorder_Limit
		{
			get
			{
				return this._Reorder_Limit;
			}
			set
			{
				if ((this._Reorder_Limit != value))
				{
					this.OnReorder_LimitChanging(value);
					this.SendPropertyChanging();
					this._Reorder_Limit = value;
					this.SendPropertyChanged("Reorder_Limit");
					this.OnReorder_LimitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_tbl_Stock_tbl", Storage="_Item_tbl", ThisKey="Item_Id", OtherKey="Item_Id", IsForeignKey=true)]
		public Item_tbl Item_tbl
		{
			get
			{
				return this._Item_tbl.Entity;
			}
			set
			{
				Item_tbl previousValue = this._Item_tbl.Entity;
				if (((previousValue != value) 
							|| (this._Item_tbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item_tbl.Entity = null;
						previousValue.Stock_tbls.Remove(this);
					}
					this._Item_tbl.Entity = value;
					if ((value != null))
					{
						value.Stock_tbls.Add(this);
						this._Item_Id = value.Item_Id;
					}
					else
					{
						this._Item_Id = default(int);
					}
					this.SendPropertyChanged("Item_tbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Supplier_Bill_tbl")]
	public partial class Supplier_Bill_tbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Invoice_Id;
		
		private int _Supplier_Id;
		
		private int _Item_Id;
		
		private int _Quantity;
		
		private System.DateTime _Date;
		
		private System.Nullable<double> _Amount;
		
		private EntityRef<Item_tbl> _Item_tbl;
		
		private EntityRef<Suppliers_tbl> _Suppliers_tbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInvoice_IdChanging(int value);
    partial void OnInvoice_IdChanged();
    partial void OnSupplier_IdChanging(int value);
    partial void OnSupplier_IdChanged();
    partial void OnItem_IdChanging(int value);
    partial void OnItem_IdChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnAmountChanging(System.Nullable<double> value);
    partial void OnAmountChanged();
    #endregion
		
		public Supplier_Bill_tbl()
		{
			this._Item_tbl = default(EntityRef<Item_tbl>);
			this._Suppliers_tbl = default(EntityRef<Suppliers_tbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Invoice_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Invoice_Id
		{
			get
			{
				return this._Invoice_Id;
			}
			set
			{
				if ((this._Invoice_Id != value))
				{
					this.OnInvoice_IdChanging(value);
					this.SendPropertyChanging();
					this._Invoice_Id = value;
					this.SendPropertyChanged("Invoice_Id");
					this.OnInvoice_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Supplier_Id", DbType="Int NOT NULL")]
		public int Supplier_Id
		{
			get
			{
				return this._Supplier_Id;
			}
			set
			{
				if ((this._Supplier_Id != value))
				{
					if (this._Suppliers_tbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplier_IdChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Id = value;
					this.SendPropertyChanged("Supplier_Id");
					this.OnSupplier_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item_Id", DbType="Int NOT NULL")]
		public int Item_Id
		{
			get
			{
				return this._Item_Id;
			}
			set
			{
				if ((this._Item_Id != value))
				{
					if (this._Item_tbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItem_IdChanging(value);
					this.SendPropertyChanging();
					this._Item_Id = value;
					this.SendPropertyChanged("Item_Id");
					this.OnItem_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float")]
		public System.Nullable<double> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_tbl_Supplier_Bill_tbl", Storage="_Item_tbl", ThisKey="Item_Id", OtherKey="Item_Id", IsForeignKey=true)]
		public Item_tbl Item_tbl
		{
			get
			{
				return this._Item_tbl.Entity;
			}
			set
			{
				Item_tbl previousValue = this._Item_tbl.Entity;
				if (((previousValue != value) 
							|| (this._Item_tbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item_tbl.Entity = null;
						previousValue.Supplier_Bill_tbls.Remove(this);
					}
					this._Item_tbl.Entity = value;
					if ((value != null))
					{
						value.Supplier_Bill_tbls.Add(this);
						this._Item_Id = value.Item_Id;
					}
					else
					{
						this._Item_Id = default(int);
					}
					this.SendPropertyChanged("Item_tbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Suppliers_tbl_Supplier_Bill_tbl", Storage="_Suppliers_tbl", ThisKey="Supplier_Id", OtherKey="Supplier_Id", IsForeignKey=true)]
		public Suppliers_tbl Suppliers_tbl
		{
			get
			{
				return this._Suppliers_tbl.Entity;
			}
			set
			{
				Suppliers_tbl previousValue = this._Suppliers_tbl.Entity;
				if (((previousValue != value) 
							|| (this._Suppliers_tbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Suppliers_tbl.Entity = null;
						previousValue.Supplier_Bill_tbls.Remove(this);
					}
					this._Suppliers_tbl.Entity = value;
					if ((value != null))
					{
						value.Supplier_Bill_tbls.Add(this);
						this._Supplier_Id = value.Supplier_Id;
					}
					else
					{
						this._Supplier_Id = default(int);
					}
					this.SendPropertyChanged("Suppliers_tbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Suppliers_tbl")]
	public partial class Suppliers_tbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Supplier_Id;
		
		private string _Supplier_Name;
		
		private System.Nullable<int> _Phone_No;
		
		private EntitySet<Item_tbl> _Item_tbls;
		
		private EntitySet<Payment_tbl> _Payment_tbls;
		
		private EntitySet<Supplier_Bill_tbl> _Supplier_Bill_tbls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSupplier_IdChanging(int value);
    partial void OnSupplier_IdChanged();
    partial void OnSupplier_NameChanging(string value);
    partial void OnSupplier_NameChanged();
    partial void OnPhone_NoChanging(System.Nullable<int> value);
    partial void OnPhone_NoChanged();
    #endregion
		
		public Suppliers_tbl()
		{
			this._Item_tbls = new EntitySet<Item_tbl>(new Action<Item_tbl>(this.attach_Item_tbls), new Action<Item_tbl>(this.detach_Item_tbls));
			this._Payment_tbls = new EntitySet<Payment_tbl>(new Action<Payment_tbl>(this.attach_Payment_tbls), new Action<Payment_tbl>(this.detach_Payment_tbls));
			this._Supplier_Bill_tbls = new EntitySet<Supplier_Bill_tbl>(new Action<Supplier_Bill_tbl>(this.attach_Supplier_Bill_tbls), new Action<Supplier_Bill_tbl>(this.detach_Supplier_Bill_tbls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Supplier_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Supplier_Id
		{
			get
			{
				return this._Supplier_Id;
			}
			set
			{
				if ((this._Supplier_Id != value))
				{
					this.OnSupplier_IdChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Id = value;
					this.SendPropertyChanged("Supplier_Id");
					this.OnSupplier_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Supplier_Name", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string Supplier_Name
		{
			get
			{
				return this._Supplier_Name;
			}
			set
			{
				if ((this._Supplier_Name != value))
				{
					this.OnSupplier_NameChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Name = value;
					this.SendPropertyChanged("Supplier_Name");
					this.OnSupplier_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone_No", DbType="Int")]
		public System.Nullable<int> Phone_No
		{
			get
			{
				return this._Phone_No;
			}
			set
			{
				if ((this._Phone_No != value))
				{
					this.OnPhone_NoChanging(value);
					this.SendPropertyChanging();
					this._Phone_No = value;
					this.SendPropertyChanged("Phone_No");
					this.OnPhone_NoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Suppliers_tbl_Item_tbl", Storage="_Item_tbls", ThisKey="Supplier_Id", OtherKey="Supplier_Id")]
		public EntitySet<Item_tbl> Item_tbls
		{
			get
			{
				return this._Item_tbls;
			}
			set
			{
				this._Item_tbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Suppliers_tbl_Payment_tbl", Storage="_Payment_tbls", ThisKey="Supplier_Id", OtherKey="Supplier_Id")]
		public EntitySet<Payment_tbl> Payment_tbls
		{
			get
			{
				return this._Payment_tbls;
			}
			set
			{
				this._Payment_tbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Suppliers_tbl_Supplier_Bill_tbl", Storage="_Supplier_Bill_tbls", ThisKey="Supplier_Id", OtherKey="Supplier_Id")]
		public EntitySet<Supplier_Bill_tbl> Supplier_Bill_tbls
		{
			get
			{
				return this._Supplier_Bill_tbls;
			}
			set
			{
				this._Supplier_Bill_tbls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Item_tbls(Item_tbl entity)
		{
			this.SendPropertyChanging();
			entity.Suppliers_tbl = this;
		}
		
		private void detach_Item_tbls(Item_tbl entity)
		{
			this.SendPropertyChanging();
			entity.Suppliers_tbl = null;
		}
		
		private void attach_Payment_tbls(Payment_tbl entity)
		{
			this.SendPropertyChanging();
			entity.Suppliers_tbl = this;
		}
		
		private void detach_Payment_tbls(Payment_tbl entity)
		{
			this.SendPropertyChanging();
			entity.Suppliers_tbl = null;
		}
		
		private void attach_Supplier_Bill_tbls(Supplier_Bill_tbl entity)
		{
			this.SendPropertyChanging();
			entity.Suppliers_tbl = this;
		}
		
		private void detach_Supplier_Bill_tbls(Supplier_Bill_tbl entity)
		{
			this.SendPropertyChanging();
			entity.Suppliers_tbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Payment_Report")]
	public partial class Payment_Report : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Report_No;
		
		private int _Payment_Id;
		
		private System.DateTime _Date;
		
		private string _Month;
		
		private double _Amount;
		
		private EntityRef<Payment_tbl> _Payment_tbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReport_NoChanging(int value);
    partial void OnReport_NoChanged();
    partial void OnPayment_IdChanging(int value);
    partial void OnPayment_IdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnMonthChanging(string value);
    partial void OnMonthChanged();
    partial void OnAmountChanging(double value);
    partial void OnAmountChanged();
    #endregion
		
		public Payment_Report()
		{
			this._Payment_tbl = default(EntityRef<Payment_tbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Report_No", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Report_No
		{
			get
			{
				return this._Report_No;
			}
			set
			{
				if ((this._Report_No != value))
				{
					if (this._Payment_tbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReport_NoChanging(value);
					this.SendPropertyChanging();
					this._Report_No = value;
					this.SendPropertyChanged("Report_No");
					this.OnReport_NoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payment_Id", DbType="Int NOT NULL")]
		public int Payment_Id
		{
			get
			{
				return this._Payment_Id;
			}
			set
			{
				if ((this._Payment_Id != value))
				{
					this.OnPayment_IdChanging(value);
					this.SendPropertyChanging();
					this._Payment_Id = value;
					this.SendPropertyChanged("Payment_Id");
					this.OnPayment_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Month
		{
			get
			{
				return this._Month;
			}
			set
			{
				if ((this._Month != value))
				{
					this.OnMonthChanging(value);
					this.SendPropertyChanging();
					this._Month = value;
					this.SendPropertyChanged("Month");
					this.OnMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float NOT NULL")]
		public double Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Payment_tbl_Payment_Report", Storage="_Payment_tbl", ThisKey="Report_No", OtherKey="Payment_Invoice_Id", IsForeignKey=true)]
		public Payment_tbl Payment_tbl
		{
			get
			{
				return this._Payment_tbl.Entity;
			}
			set
			{
				Payment_tbl previousValue = this._Payment_tbl.Entity;
				if (((previousValue != value) 
							|| (this._Payment_tbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Payment_tbl.Entity = null;
						previousValue.Payment_Report = null;
					}
					this._Payment_tbl.Entity = value;
					if ((value != null))
					{
						value.Payment_Report = this;
						this._Report_No = value.Payment_Invoice_Id;
					}
					else
					{
						this._Report_No = default(int);
					}
					this.SendPropertyChanged("Payment_tbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
